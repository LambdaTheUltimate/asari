fn if p x e y {
  switch e {
    case else:
  };
  switch p {
    case true: x ()
    case false: y ()
  }
}

val else = enum else;

val true = enum true;

val false = enum false;

fn foo x {
  switch x {
    case A: x.foo
    case B: x.bar
  }
}

val x = struct A {
  foo: true
};

if (foo x) {
  a;
  b;
} else {
  a;
  b;
};

fn when p x { if p x else {} }

val y = struct B {
  bar: true
};

when (foo y) {
  a;
  b;
};

fn qux x {
  switch x {
    case A: x
    case B: x
    default: x
  }
}

fn blah x {
  switch x {
    case A: x.foo
    case B: x.bar
    default: x.bar
  }
}

val z = struct C {
  baz: false
};

blah (qux y);

blah y;

blah x;
